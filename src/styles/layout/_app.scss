/*
 * CSS Grid used for app layout
 * App divided into three full-width rows: header, nav, main. Header and nav heights set
 * to 'auto' to fit contents, with remainder of viewport height given to main;
 */
#app {
  height: 100vh;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto auto 1fr;
  grid-template-areas:
    'header-area'
    'nav-area'
    'main-area';
}

app-header {
  grid-area: header-area;
}

app-nav {
  grid-area: nav-area;
}

/*
 * 1 - allow main section to overflow, resulting in a fixed 'sticky' header
 * 2 - give main section its own grid, consisting of router-outlet and app-footer
 * 3 - split section into three columns: variable middle column with a limit on the width,
 *     and the remainder viewport width split equally on either side
 * 4 - row 1 (router-outlet) will receive whatever is left over after row 2 (app-footer)
 *     has sized to fit its content
 * 5 - start-row / start-column / end-row / end-column: span app-footer across full width
 */
section#app-main {
  grid-area: main-area;
  overflow: auto; /* 1 */

  display: grid; /* 2 */
  grid-template-columns: 1fr minmax(0, 1200px) 1fr; /* 3 */
  grid-template-rows: 1fr auto; /* 4 */
  background-color: $cb-background;

  & > app-footer {
    grid-area: 2 / 1 / 3 / 4; /* 5 */
  }
}
